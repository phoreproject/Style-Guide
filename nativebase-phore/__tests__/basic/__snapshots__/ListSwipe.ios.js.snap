// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders regular Single SwipeRow 1`] = `
<RCTScrollView
  automaticallyAdjustContentInsets={false}
  contentContainerStyle={
    Array [
      Object {
        "padding": undefined,
      },
      undefined,
    ]
  }
  contentInset={
    Object {
      "bottom": 0,
    }
  }
  enableAutomaticScroll={true}
  enableResetScrollToCoords={true}
  extraHeight={75}
  extraScrollHeight={0}
  getScrollResponder={[Function]}
  handleOnScroll={[Function]}
  keyboardDismissMode="interactive"
  keyboardOpeningTime={250}
  keyboardShouldPersistTaps="handled"
  keyboardSpace={0}
  onScroll={[Function]}
  resetKeyboardSpace={[Function]}
  resetScrollToCoords={
    Object {
      "x": 0,
      "y": 0,
    }
  }
  scrollEnabled={false}
  scrollEventThrottle={1}
  scrollForExtraHeightOnAndroid={[Function]}
  scrollToEnd={[Function]}
  scrollToFocusedInput={[Function]}
  scrollToPosition={[Function]}
  showsVerticalScrollIndicator={true}
  style={Object {}}
  viewIsInsideTabBar={false}
  virtual={undefined}
>
  <View>
    <View
      style={Object {}}
    >
      <View
        style={
          Array [
            Object {
              "bottom": 0,
              "left": 0,
              "overflow": "hidden",
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            Object {
              "flex": 1,
              "flexDirection": "row",
              "height": 0,
              "justifyContent": "space-between",
            },
          ]
        }
      >
        <View
          style={
            Array [
              Object {},
              Object {
                "width": 75,
                "zIndex": 1,
              },
            ]
          }
          virtual={undefined}
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "borderRadius": 2,
                "opacity": 1,
              }
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              active={true}
              allowFontScaling={false}
              disabled={false}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 12,
                  },
                  Array [
                    Object {},
                    Object {},
                    Object {
                      "color": "#FFF",
                    },
                  ],
                  Object {
                    "fontFamily": "Ionicons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                ]
              }
              virtual={undefined}
            >
              
            </Text>
          </View>
        </View>
        <View
          style={
            Array [
              Object {},
              Object {
                "flex": 0,
              },
            ]
          }
          virtual={undefined}
        />
        <View
          style={
            Array [
              Object {},
              Object {
                "width": 75,
                "zIndex": 1,
              },
            ]
          }
          virtual={undefined}
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "borderRadius": 2,
                "opacity": 1,
              }
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              active={true}
              allowFontScaling={false}
              disabled={false}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 12,
                  },
                  Array [
                    Object {},
                    Object {},
                  ],
                  Object {
                    "fontFamily": "Ionicons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                ]
              }
              virtual={undefined}
            >
              
            </Text>
          </View>
        </View>
      </View>
      <View
        collapsable={undefined}
        onLayout={[Function]}
        onMoveShouldSetResponder={[Function]}
        onMoveShouldSetResponderCapture={[Function]}
        onResponderEnd={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderReject={[Function]}
        onResponderRelease={[Function]}
        onResponderStart={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        onStartShouldSetResponderCapture={[Function]}
        style={
          Object {
            "transform": Array [
              Object {
                "translateX": 0,
              },
            ],
            "zIndex": 2,
          }
        }
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
              },
              undefined,
            ]
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            list={true}
            style={
              Array [
                Object {},
                Object {},
              ]
            }
            virtual={undefined}
          >
            <View
              style={
                Object {
                  "paddingLeft": 20,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                disabled={false}
                ellipsizeMode="tail"
                style={Object {}}
                uppercase={false}
                virtual={undefined}
              >
                Swipe me to left and right
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;

exports[`renders regular Single SwipeRow Custom Style 1`] = `
<RCTScrollView
  automaticallyAdjustContentInsets={false}
  contentContainerStyle={
    Array [
      Object {
        "padding": undefined,
      },
      undefined,
    ]
  }
  contentInset={
    Object {
      "bottom": 0,
    }
  }
  enableAutomaticScroll={true}
  enableResetScrollToCoords={true}
  extraHeight={75}
  extraScrollHeight={0}
  getScrollResponder={[Function]}
  handleOnScroll={[Function]}
  keyboardDismissMode="interactive"
  keyboardOpeningTime={250}
  keyboardShouldPersistTaps="handled"
  keyboardSpace={0}
  onScroll={[Function]}
  resetKeyboardSpace={[Function]}
  resetScrollToCoords={
    Object {
      "x": 0,
      "y": 0,
    }
  }
  scrollEnabled={false}
  scrollEventThrottle={1}
  scrollForExtraHeightOnAndroid={[Function]}
  scrollToEnd={[Function]}
  scrollToFocusedInput={[Function]}
  scrollToPosition={[Function]}
  showsVerticalScrollIndicator={true}
  style={Object {}}
  viewIsInsideTabBar={false}
  virtual={undefined}
>
  <View>
    <View
      style={
        Array [
          Object {},
          Object {
            "backgroundColor": "#9370DB",
          },
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "bottom": 0,
              "left": 0,
              "overflow": "hidden",
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            Object {
              "flex": 1,
              "flexDirection": "row",
              "height": 0,
              "justifyContent": "space-between",
            },
          ]
        }
      >
        <View
          style={
            Array [
              Object {},
              Object {
                "width": 75,
                "zIndex": 1,
              },
            ]
          }
          virtual={undefined}
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "borderRadius": 2,
                "opacity": 1,
              }
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              active={true}
              allowFontScaling={false}
              disabled={false}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 12,
                  },
                  Array [
                    Object {},
                    Object {},
                    Object {
                      "color": "#FFF",
                    },
                  ],
                  Object {
                    "fontFamily": "Ionicons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                ]
              }
              virtual={undefined}
            >
              
            </Text>
          </View>
        </View>
        <View
          style={
            Array [
              Object {},
              Object {
                "flex": 0,
              },
            ]
          }
          virtual={undefined}
        />
        <View
          style={
            Array [
              Object {},
              Object {
                "width": 75,
                "zIndex": 1,
              },
            ]
          }
          virtual={undefined}
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "borderRadius": 2,
                "opacity": 1,
              }
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              active={true}
              allowFontScaling={false}
              disabled={false}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontSize": 12,
                  },
                  Array [
                    Object {},
                    Object {},
                  ],
                  Object {
                    "fontFamily": "Ionicons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                ]
              }
              virtual={undefined}
            >
              
            </Text>
          </View>
        </View>
      </View>
      <View
        collapsable={undefined}
        onLayout={[Function]}
        onMoveShouldSetResponder={[Function]}
        onMoveShouldSetResponderCapture={[Function]}
        onResponderEnd={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderReject={[Function]}
        onResponderRelease={[Function]}
        onResponderStart={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        onStartShouldSetResponderCapture={[Function]}
        style={
          Object {
            "transform": Array [
              Object {
                "translateX": 0,
              },
            ],
            "zIndex": 2,
          }
        }
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
              },
              undefined,
            ]
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            list={true}
            style={
              Array [
                Object {},
                Object {},
                Object {
                  "backgroundColor": "#9370DB",
                },
              ]
            }
            virtual={undefined}
          >
            <View
              style={
                Object {
                  "paddingLeft": 20,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                disabled={false}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {},
                    Object {
                      "color": "#FFF",
                    },
                  ]
                }
                uppercase={false}
                virtual={undefined}
              >
                Swipe me to left and right
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
